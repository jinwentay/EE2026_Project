`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// National University of Singapore
// Department of Electrical and Computer Engineering
// EE2026 Digital Design
// AY1819 Semester 1
// Project: Voice Scope
//////////////////////////////////////////////////////////////////////////////////
module Voice_Scope_TOP(
    input CLK,
    input [14:0] sw,
    input sw_,
    input btnC,
    input btnU,
    input btnL,
    input btnR,
    input btnD,
    input  J_MIC3_Pin3,   // PmodMIC3 audio input data (serial)
    output J_MIC3_Pin1,   // PmodMIC3 chip select, 20kHz sampling clock
    output J_MIC3_Pin4,   // PmodMIC3 serial clock (generated by module VoiceCapturer.v)
   
    output [3:0] VGA_RED,    // RGB outputs to VGA connector (4 bits per channel gives 4096 possible colors)
    output [3:0] VGA_GREEN,
    output [3:0] VGA_BLUE,
    
    output VGA_VS,          // horizontal & vertical sync outputs to VGA connector
    output VGA_HS,
    output [15:0] led,
    output [6:0] seg,
    output [3:0] an
    );
       
   
      
       
//-----------------------------------------------------------------------------
//                  STUDENT A - MIC
//-----------------------------------------------------------------------------

    wire clk_20hz;   
    wire [11:0] MIC_in;   
    
// Please create a clock divider module to generate a 20kHz clock signal. 
// Instantiate it below
    clk_div one(clk_20hz, 2499, CLK);
       
// Please instantiate the voice capturer module below
   
    Voice_Capturer two(CLK, clk_20hz, J_MIC3_Pin3, J_MIC3_Pin1, J_MIC3_Pin4, MIC_in);
    freq_indicator freq(MIC_in, clk_20hz, led, seg, an);


//-----------------------------------------------------------------------------
//                  STUDENT B - VGA
//-----------------------------------------------------------------------------

    wire [11:0] VGA_HORZ_COORD;
    wire [11:0] VGA_VERT_COORD; 
    
// Please instantiate the waveform drawer module below
    reg [3:0] RED_BACK = 0;
    reg [3:0] GREEN_BACK = 0;
    reg [3:0] BLUE_BACK = 0;
    reg [3:0] RED_AXIS = 15;
    reg [3:0] GREEN_AXIS = 15;
    reg [3:0] BLUE_AXIS = 15;
    reg [3:0] RED_GRAPH = 15;
    reg [3:0] GREEN_GRAPH = 15;
    reg [3:0] BLUE_GRAPH = 15;
    reg [3:0] SELECTOR = 2;
    wire [3:0] VGA_Red_waveform;
    wire [3:0] VGA_Green_waveform;
    wire [3:0] VGA_Blue_waveform;
    wire [9:0] wave_sample; 
    wire [9:0] testwave;
    wire spoLeft, spoRight, spoCentre, spoUp, spoDown;
    spc spcLeft(CLK, btnL, spoLeft);
    spc spcRight(CLK, btnR, spoRight);
    spc spcCentre(CLK, btnC, spoCentre);
    spc spcUp(CLK, btnU, spoUp);
    spc spcDown(CLK, btnD, spoDown);
    testwave_gen three(clk_20hz, testwave);
    
    Draw_Waveform five(RED_GRAPH[3:0], GREEN_GRAPH[3:0], BLUE_GRAPH[3:0], RED_BACK[3:0], GREEN_BACK[3:0], BLUE_BACK[3:0],clk_20hz, sw[0], sw[1], wave_sample, VGA_HORZ_COORD, VGA_VERT_COORD, VGA_Red_waveform, VGA_Green_waveform, VGA_Blue_waveform);
    always @ (posedge CLK) begin
    if (~sw[2] & ~sw[3] & sw[4] & ~sw[5]) begin
        if (spoUp & btnL & ~spoRight & ~btnR & ~spoCentre & ~btnC)
            RED_AXIS <= (RED_AXIS == 15) ? RED_AXIS : RED_AXIS + 1;
        else if (spoUp & btnR & ~spoLeft & ~btnL & ~spoCentre & ~btnC)
            BLUE_AXIS <= (BLUE_AXIS == 15) ? BLUE_AXIS : BLUE_AXIS + 1;
        else if (spoUp & btnC & ~spoRight & ~btnR & ~spoLeft & ~btnL)
            GREEN_AXIS <= (GREEN_AXIS == 15) ? GREEN_AXIS : GREEN_AXIS + 1;
        else if (spoDown & btnL & ~spoRight & ~btnR & ~spoCentre & ~btnC)
            RED_AXIS <= (RED_AXIS == 0) ? 0 : RED_AXIS - 1;
        else if (spoDown & btnR & ~spoLeft & ~btnL & ~spoCentre & ~btnC)
            BLUE_AXIS <= (BLUE_AXIS == 0) ? 0 : BLUE_AXIS - 1;
        else if (spoDown & btnC & ~spoRight & ~btnR & ~spoLeft & ~btnL)
            GREEN_AXIS <= (GREEN_AXIS == 0) ? 0 : GREEN_AXIS - 1;
    end
    else if (~sw[2] & sw[3] & ~sw[4] & ~sw[5]) begin
        if (spoUp & btnL & ~spoRight & ~btnR & ~spoCentre & ~btnC)
            RED_BACK <= (RED_BACK == 15) ? RED_BACK : RED_BACK + 1;
        else if (spoUp & btnR & ~spoLeft & ~btnL & ~spoCentre & ~btnC)
            BLUE_BACK <= (BLUE_BACK == 15) ? BLUE_BACK : BLUE_BACK + 1;
        else if (spoUp & btnC & ~spoRight & ~btnR & ~spoLeft & ~btnL)
            GREEN_BACK <= (GREEN_BACK == 15) ? GREEN_BACK : GREEN_BACK + 1;
        else if (spoDown & btnL & ~spoRight & ~btnR & ~spoCentre & ~btnC)
            RED_BACK <= (RED_BACK == 0) ? 0 : RED_BACK - 1;
        else if (spoDown & btnR & ~spoLeft & ~btnL & ~spoCentre & ~btnC)
            BLUE_BACK <= (BLUE_BACK == 0) ? 0 : BLUE_BACK - 1;
        else if (spoDown & btnC & ~spoRight & ~btnR & ~spoLeft & ~btnL)
            GREEN_BACK <= (GREEN_BACK == 0) ? 0 : GREEN_BACK - 1;
    end
    else if (sw[2] & ~sw[3] & ~sw[4] & ~sw[5]) begin
        if (spoUp & btnL & ~spoRight & ~btnR & ~spoCentre & ~btnC)
            RED_GRAPH <= (RED_GRAPH == 15) ? RED_GRAPH : RED_GRAPH + 1;
        else if (spoUp & btnR & ~spoLeft & ~btnL & ~spoCentre & ~btnC)
            BLUE_GRAPH <= (BLUE_GRAPH == 15) ? BLUE_GRAPH : BLUE_GRAPH + 1;
        else if (spoUp & btnC & ~spoRight & ~btnR & ~spoLeft & ~btnL)
            GREEN_GRAPH <= (GREEN_GRAPH == 15) ? GREEN_GRAPH : GREEN_GRAPH + 1;
        else if (spoDown & btnL & ~spoRight & ~btnR & ~spoCentre & ~btnC)
            RED_GRAPH <= (RED_GRAPH == 0) ? 0 : RED_GRAPH - 1;
        else if (spoDown & btnR & ~spoLeft & ~btnL & ~spoCentre & ~btnC)
            BLUE_GRAPH <= (BLUE_GRAPH == 0) ? 0 : BLUE_GRAPH - 1;
        else if (spoDown & btnC & ~spoRight & ~btnR & ~spoLeft & ~btnL)
            GREEN_GRAPH <= (GREEN_GRAPH == 0) ? 0 : GREEN_GRAPH - 1;
    end
    else if (~sw[2] & ~sw[3] & ~sw[4] & sw[5]) begin
        RED_GRAPH <= 0;
        GREEN_GRAPH <= 0;
        BLUE_GRAPH <= 0;
        RED_AXIS <= 0;
        GREEN_AXIS <= 0;
        BLUE_AXIS <= 0;
        RED_BACK <= 0;
        GREEN_BACK <= 0;
        BLUE_BACK <= 0;
    end
    end
// Please instantiate the background drawing module below   
    wire [3:0] VGA_Red_grid;
    wire [3:0] VGA_Green_grid;
    wire [3:0] VGA_Blue_grid;
    
   Draw_Background four(RED_AXIS[3:0], GREEN_AXIS[3:0], BLUE_AXIS[3:0], RED_BACK[3:0], GREEN_BACK[3:0], BLUE_BACK[3:0], VGA_HORZ_COORD, VGA_VERT_COORD, VGA_Red_grid, VGA_Green_grid, VGA_Blue_grid);
// Please instantiate the VGA display module below     
     
   VGA_DISPLAY six(CLK, VGA_Red_waveform, VGA_Green_waveform, VGA_Blue_waveform, VGA_Red_grid, VGA_Green_grid, 
   VGA_Blue_grid, VGA_HORZ_COORD, VGA_VERT_COORD, VGA_RED, VGA_GREEN, VGA_BLUE, VGA_VS, VGA_HS);
     
   assign wave_sample = sw_ ? MIC_in[11:2]:testwave;
   
     
                    
endmodule
